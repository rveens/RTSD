-- Generated by TERRA CSPm2CSP version 1.0.2
-- Input file: fwdEulerMethod.cspm

-- Channels
channel channel_LoopController_dx_out_to_Plant_t1
channel channel_LoopController_writer2_to_MainModel_read2
channel channel_Plant_t2_to_LoopController_x_reader
channel channel_Timer_stepWriter_to_LoopController_u_reader
channel channel_Timer_writer_to_MainModel_read1

-- Processes
MainModel_PARALLEL = if (true) then (MainModel_PARALLEL_b ||| MainModel_PARALLEL_a ) ; MainModel_PARALLEL else SKIP
MainModel_PARALLEL_b = MainModel_Timer [| {| channel_Timer_stepWriter_to_LoopController_u_reader |} |] (MainModel_LoopController [| {| channel_LoopController_dx_out_to_Plant_t1 , channel_Plant_t2_to_LoopController_x_reader |} |] MainModel_Plant)
MainModel_Timer = Timer_SEQUENTIAL
Timer_SEQUENTIAL = Timer_StepFunction ; Timer_PARALLEL
Timer_StepFunction = SKIP
Timer_PARALLEL = Timer_stepWriter ||| Timer_writer
Timer_stepWriter = channel_Timer_stepWriter_to_LoopController_u_reader -> SKIP
Timer_writer = channel_Timer_writer_to_MainModel_read1 -> SKIP
MainModel_LoopController = LoopController_SEQUENTIAL
LoopController_SEQUENTIAL = LoopController_PARALLEL ; LoopController_PARALLEL_b
LoopController_PARALLEL = LoopController_u_reader ||| LoopController_x_reader
LoopController_u_reader = channel_Timer_stepWriter_to_LoopController_u_reader -> SKIP
LoopController_x_reader = channel_Plant_t2_to_LoopController_x_reader -> SKIP
LoopController_PARALLEL_b = LoopController_dx_out ||| LoopController_writer2
LoopController_dx_out = channel_LoopController_dx_out_to_Plant_t1 -> SKIP
LoopController_writer2 = channel_LoopController_writer2_to_MainModel_read2 -> SKIP
MainModel_Plant = Plant_SEQUENTIAL
Plant_SEQUENTIAL = Plant_t2 ; Plant_t1
Plant_t2 = channel_Plant_t2_to_LoopController_x_reader -> SKIP
Plant_t1 = channel_LoopController_dx_out_to_Plant_t1 -> SKIP
MainModel_PARALLEL_a = MainModel_read1 ||| MainModel_read2
MainModel_read1 = channel_Timer_writer_to_MainModel_read1 -> SKIP
MainModel_read2 = channel_LoopController_writer2_to_MainModel_read2 -> SKIP

-- Idle process
channel idle
IDLE = idle -> IDLE

-- Assert the toplevel
assert MainModel_PARALLEL :[deadlock free [F]]
assert MainModel_PARALLEL;IDLE :[deadlock free [F]]

-- protected region user defined area on begin --
-- protected region user defined area end --
