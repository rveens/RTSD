/**
 * Source file for the ChckHorCalc model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "Check/ChckHorCalc.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace JIWY { namespace Check { namespace ChckHorCalc { 

ChckHorCalc::ChckHorCalc(double &hor_in, double &hor_out) :
    CodeBlock(), hor_in(hor_in), hor_out(hor_out)
{
  SETNAME(this, "ChckHorCalc");

  // protected region constructor on begin
  // protected region constructor end
}

ChckHorCalc::~ChckHorCalc()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end
}

void ChckHorCalc::execute()
{
  // protected region execute code on begin
	this->hor_out = convert(normalise(this->hor_in));
	printf("Horitzontal: in: %f, out: %f\n", ver_in, ver_out);
  // protected region execute code end
}

// protected region additional functions on begin
uint16_t ChckHorCalc::convert(double f)
{
	int16_t deadzone = 2200;

	int16_t n = f*(32768-deadzone);
	if(n>0)
		n += deadzone;
	else if(n<0)
		n -= deadzone;

	if(n>=0 && n<32768)
		return n;
	else if(n >= -32768 && n<0)
	{
		n *= -1;
		return (n^0xFFFF) + 1;
	}
	else
		return 0;
}

double ChckHorCalc::normalise(double n)
{
	// linear conversion assumed
	double min=-512, max=512;

	// normalise to [-1,1]
	n-= min;
	n/= max - min;
	n*= 2;
	n-= 1;

	return n;

	/*
	// scale to int16_t
	if(n=1)
		return 32767;
	else
		return n*32768;
	//*/
}
// protected region additional functions end

// Close namespace(s)
} } } 
