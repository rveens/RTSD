/**
 * Source file for the MainModel model
 * Generated by the TERRA Arch2LUNA generator version 1.0.0
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
#include <hw/inout.h>
#include <sys/neutrino.h>
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 

MainModel::MainModel() :
    Recursion<CSProcess>()
{
  SETNAME(this, "MainModel");

  //enable IO privileges, due to use of in16() and out16() calls
  ThreadCtl(_NTO_TCTL_IO, 0);


  // Initialize hardware channels
  AnyIO::AnyioEncoderSettingsSim myencoderport_to_EncoderTesterinChannelSettings;
  myencoderport_to_EncoderTesterinChannelSettings.deviceNr = 0;
  myencoderport_to_EncoderTesterinChannelSettings.encoderNr = 2;
  myencoderport_to_EncoderTesterinChannelSettings.baseAddress = 0x0;
  myencoderport_to_EncoderTesterinChannelSettings.registerSize = 4;
  myencoderport_to_EncoderTesterinChannelSettings.baseControlAddress = 0x20;
  myencoderport_to_EncoderTesterinChannelSettings.controlRegisterSize = 2;
  myencoderport_to_EncoderTesterinChannelSettings.gModeAddress = 0x52;
  myencoderport_to_EncoderTesterinChannelSettings.encoderEnableBit = 1;
  myencoderport_to_EncoderTesterinChannel = new AnyIO::AnyioEncoderLinkDriverSim<uint32_t>(myencoderport_to_EncoderTesterinChannelSettings);

  // Initialize model objects
  myEncoderTester = new EncoderTester::EncoderTester(myencoderport_to_EncoderTesterinChannel);
  SETNAME(myEncoderTester, "EncoderTester");

  // Create Parallel group containing all architecture components
  parallelGroup = new Parallel(
    (CSPConstruct *) myEncoderTester,
    NULL
  );
  SETNAME(parallelGroup, "parallelGroup");

  // Register group as top-level recursive object
  setToActivate(parallelGroup);
  setEvaluateCondition(true);
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // Destroy model objects
  delete myEncoderTester;

  // Destroy channels
  delete myencoderport_to_EncoderTesterinChannel;
}

// Close namespace(s)
} 
