/**
 * Source file for the ChkVerCalc model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.3
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "Check/ChkVerCalc.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace JIWY { namespace Check { namespace ChkVerCalc { 

ChkVerCalc::ChkVerCalc(double &ver_in, uint16_t &ver_out) :
    CodeBlock(), ver_in(ver_in), ver_out(ver_out)
{
  SETNAME(this, "ChkVerCalc");

  // protected region constructor on begin
  // protected region constructor end
}

ChkVerCalc::~ChkVerCalc()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end
}

void ChkVerCalc::execute()
{
  // protected region execute code on begin
	this->ver_out = convert(normalise(this->ver_in));
	printf("in: %f, out: %f\n", ver_in, ver_out);
  // protected region execute code end
}



// protected region additional functions on begin
uint16_t ChkVerCalc::convert(double f)
{
	int16_t deadzone = 2200;

	int16_t n = f*(32768-deadzone);
	if(n>0)
		n += deadzone;
	else if(n<0)
		n -= deadzone;

	if(n>=0 && n<32768)
		return n;
	else if(n >= -32768 && n<0)
	{
		n *= -1;
		return (n^0xFFFF) + 1;
	}
	else
		return 0;
}

double ChkVerCalc::normalise(double n)
{
	// linear conversion assumed
	double min=-512, max=512;

	// normalise to [-1,1]
	n-= min;
	n/= max - min;
	n*= 2;
	n-= 1;

	return n;

	/*
	// scale to int16_t
	if(n=1)
		return 32767;
	else
		return n*32768;
	//*/
}
// protected region additional functions end

// Close namespace(s)
} } } 
