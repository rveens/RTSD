/**
 * Source file for the MainModel model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.1
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "MainModel.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { 



MainModel::MainModel() :
    Parallel(NULL)
{
  SETNAME(this, "MainModel");

  // Initialize channels
  myProducerch1_to_consumerch1Channel = new UnbufferedChannel<int, One2In, Out2One>();
  myProducerch2_to_consumerch2Channel = new UnbufferedChannel<int, One2In, Out2One>();
  myProducerch3_to_consumerch3Channel = new UnbufferedChannel<int, One2In, Out2One>();

  // Initialize model objects
  myProducer = new Producer::Producer(myProducerch1_to_consumerch1Channel, myProducerch2_to_consumerch2Channel, myProducerch3_to_consumerch3Channel);
  SETNAME(myProducer, "Producer");
  // Make Producer recursive
  Recursion<CSPConstruct>* myProducerRecursion = new Recursion<CSPConstruct>(myProducer);
  SETNAME(myProducerRecursion, "Producer-recursion");
  myProducerRecursion->setEvaluateCondition(true);  myconsumer = new consumer::consumer(myProducerch1_to_consumerch1Channel, myProducerch2_to_consumerch2Channel, myProducerch3_to_consumerch3Channel);
  SETNAME(myconsumer, "consumer");
  // Make consumer recursive
  Recursion<CSProcess>* myconsumerRecursion = new Recursion<CSProcess>(myconsumer);
  SETNAME(myconsumerRecursion, "consumer-recursion");
  myconsumerRecursion->setEvaluateCondition(true);

  // Register model objects
  this->append_child(myProducerRecursion);
  this->append_child(myconsumerRecursion);

  // protected region constructor on begin
  // protected region constructor end
}

MainModel::~MainModel()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin
  // protected region destructor end

  // Destroy model objects
  delete myconsumer;
  delete myProducer;

  // Destroy channels
  delete myProducerch1_to_consumerch1Channel;
  delete myProducerch2_to_consumerch2Channel;
  delete myProducerch3_to_consumerch3Channel;
}



// protected region additional functions on begin
// protected region additional functions end

// Close namespace(s)
} 
