/**
 * Source file for the consumer model
 * Generated by the TERRA CSPm2LUNA generator version 1.1.1
 *
 * protected region document description on begin
 *
 * protected region document description end
 */

#include "consumer.h"
// protected region additional headers on begin
// Each additional header should get a corresponding dependency in the Makefile
// protected region additional headers end

namespace MainModel { namespace consumer { 



consumer::consumer(GuardedChannelOut<int> *ch1, GuardedChannelOut<int> *ch2, GuardedChannelOut<int> *ch3) :
    Alternative()
{
  SETNAME(this, "consumer");

  // Initialize model objects
  mych1Code = new ch1Code::ch1Code();
  SETNAME(mych1Code, "ch1Code");
  mych2Code = new ch2Code::ch2Code();
  SETNAME(mych2Code, "ch2Code");
  mych3Code = new ch3Code::ch3Code();
  SETNAME(mych3Code, "ch3Code");
  myr1 = new GuardedReader<int>(&data, ch1);
  SETNAME(myr1, "r1");
  myr2 = new GuardedReader<int>(&data, ch2);
  SETNAME(myr2, "r2");
  myr3 = new GuardedReader<int>(&data, ch3);
  SETNAME(myr3, "r3");

  // Create SEQUENTIAL_C1 group
  mySEQUENTIAL_C1 = new Sequential(
    (CSPConstruct *) mych1Code,
    NULL
  );
  SETNAME(mySEQUENTIAL_C1, "SEQUENTIAL_C1");

  // Create SEQUENTIAL_C2 group
  mySEQUENTIAL_C2 = new Sequential(
    (CSPConstruct *) mych2Code,
    NULL
  );
  SETNAME(mySEQUENTIAL_C2, "SEQUENTIAL_C2");

  // Create SEQUENTIAL_C3 group
  mySEQUENTIAL_C3 = new Sequential(
    (CSPConstruct *) mych3Code,
    NULL
  );
  SETNAME(mySEQUENTIAL_C3, "SEQUENTIAL_C3");

  // Register sequential groups to Channel Guarded Processes
  myr1->setToActivate(mySEQUENTIAL_C1);
  myr2->setToActivate(mySEQUENTIAL_C2);
  myr3->setToActivate(mySEQUENTIAL_C3);

  // Register model objects
  this->append_child(myr2);
  this->append_child(myr3);
  this->append_child(myr1);

  // protected region constructor on begin

  // protected region constructor end
}

consumer::~consumer()
{
  // TODO Properly destroy all additional objects that got defined in the constructor

  // protected region destructor on begin

  // protected region destructor end

  // Destroy model groups
  delete mySEQUENTIAL_C1;
  delete mySEQUENTIAL_C2;
  delete mySEQUENTIAL_C3;

  // Destroy model objects
  delete myr3;
  delete myr2;
  delete myr1;
  delete mych3Code;
  delete mych2Code;
  delete mych1Code;
}



// protected region additional functions on begin

// protected region additional functions end

// Close namespace(s)
} } 
